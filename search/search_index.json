{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to UbiHome!","text":"<p>UbiHome is a single executable that allows you to integrate any device running an OS into your smart home.  It is designed to be lightweight and easy to use - similar to ESPHome.</p> <ul> <li>Execute a command on a device based on a trigger in home assistant. </li> <li>Monitor the status of a device with a custom command. </li> <li>Integrate all of your one off python scripts<sup>TM</sup> without thinking about connectivity or setting up yet another service.</li> </ul> <p>See the getting started guide for installation instructions.</p> <p>Explore the examples to see how to use UbiHome.</p> <pre><code>pi@raspberrypi:~/ $ ubihome\nUbiHome - 0.8.11\n\nUbiHome is a system which allows you to integrate any device running an OS into your smart home.\nhttps://github.com/UbiHome/UbiHome\n\nUsage: ubihome [OPTIONS] &lt;COMMAND&gt;\n\nCommands:\n  install    Install UbiHome\n  uninstall  Uninstall UbiHome\n  run        Run UbiHome manually.\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n  -c, --configuration &lt;configuration_file&gt;\n          Optional configuration file. If not provided, the default configuration will be used. [default: config.yaml]\n  -h, --help\n          Print help\n  -V, --version\n          Print version\n</code></pre>"},{"location":"index.html#roadmap","title":"Roadmap","text":"<ul> <li>Monitor connected bluetooth devices and maybe even proxy them to home assistant.</li> <li> Auto installation</li> <li> Windows (https://github.com/mullvad/windows-service-rs) https://medium.com/@aleksej.gudkov/rust-windows-service-example-building-a-windows-service-in-rust-907be67d2287</li> <li> Linux Service<ul> <li>debian (https://github.com/kornelski/cargo-deb/blob/fc34c45fafc3904cadf652473ff7e9e0344c605c/systemd.md)</li> </ul> </li> <li> MacOS?</li> <li> Templates and Services</li> <li> Additional Components:</li> <li> HTTP and Web Enpoint</li> <li> BLE (https://github.com/deviceplug/btleplug)</li> <li> Bluetooth Proxy (https://esphome.io/components/bluetooth_proxy.html)     https://docs.rs/bluer/latest/bluer/</li> <li> Online Sensor</li> <li> Custom compilation for modular builds and custom extensions.</li> <li> Homeassistant Native API</li> <li> CLI for automatic generation of executables</li> <li> Builder Component similar to ESP Home</li> <li> Self update (https://github.com/jaemk/self_update)</li> <li> GPIO https://github.com/golemparts/rppal</li> <li> Kernel events (e.g. Keyboard press) https://docs.rs/evdev/latest/evdev/</li> <li> Music Assistant Media Player integration for Windows / Linux (https://docs.rs/souvlaki/latest/souvlaki/)</li> </ul> <p>... Control USB Devices?</p> <p>Rust clippy:  https://github.com/rust-lang/rust-clippy</p> <p>Add Badges?  https://github.com/squidfunk/mkdocs-material/discussions/7137</p>"},{"location":"examples/index.html","title":"Examples","text":"<p>Here you can find some examples for using UbiHome. Parts of it are just shared configuration files you could reuse for you purposes - others are full blown guides.</p> <ul> <ul> <li>Automatic Screen Power Control </li> <li>Monitor and control Bluetooth devices </li> <li>Display a Notification </li> <li>Logging </li> <li>Motion Detection </li> <li>Open a new tab in chrome </li> <li>Turn Raspberry screen on or off </li> <li>Stop or reboot your system </li> <li>Monitor system resources </li> </ul> </ul>"},{"location":"examples/automatic_screen_power_control/index.html","title":"Automatic Screen Power Control","text":"<p>Control the screen power state based of a PIR sensor. The screen will turn on when motion is detected and off after a timeout.</p> <pre><code>ubihome:\n  name: UbiHome Example\n\ngpio:\n  device: raspberryPi\n\nshell:\n\nswitch:\n  - platform: shell\n    name: \"Screen\"\n    id: screen\n    command_on: \"vcgencmd display_power 1\" #(1)!\n    command_off: \"vcgencmd display_power 0\"\n    command_state: \"vcgencmd display_power\"\n\nbinary_sensor:\n  - platform: gpio\n    name: \"motion\"\n    icon: \"mdi:motion-sensor\"\n    device_class: presence\n    pin: 23 \n    pull_up: true\n    update_interval: \"0s\"\n    filters:\n     - delayed_off: 20s\n    on_press:\n      then:\n        - switch.turn_on: \"screen\"\n    on_release:\n      then:\n        - switch.turn_off: \"screen\"\n</code></pre> <ol> <li>If the commands are not working you can try out others from the screen on/off example.</li> </ol>"},{"location":"examples/bluetooth_monitor_control/index.html","title":"Monitor and control Bluetooth devices","text":"Linux"},{"location":"examples/bluetooth_monitor_control/index.html#bluetoothctl","title":"Bluetoothctl","text":"<pre><code>shell: \n\nbutton:\n - platform: shell\n   id: disconnect_speaker\n   name: \"Disconnect Speaker\"\n   command: bluetoothctl -- disconnect 00:12:6F:F1:FF:61\n\n\nbinary_sensor:\n  - platform: shell\n    name: \"Bluetooth Speaker connected\"\n    id: bluetooth_connected\n    icon: \"mdi:bluetooth-settings\"\n    device_class: presence\n    update_interval: 10s\n    command: |-\n      if bluetoothctl info 00:12:6F:F1:FF:61 | grep -q \"Connected: yes\"; then\n          echo true\n      else\n          echo false\n      fi\n</code></pre>"},{"location":"examples/bluetooth_monitor_control/index.html#hcitool","title":"Hcitool","text":"<pre><code>shell: \n\nbinary_sensor:\n  - platform: shell\n    name: \"Bluetooth Speaker connected\"\n    id: bluetooth_connected\n    icon: \"mdi:bluetooth-settings\"\n    device_class: presence\n    update_interval: 10s\n    command: |-\n      if hcitool con | grep -q \"00:12:6F:F1:FF:61\"; then\n          echo true\n      else\n          echo false\n      fi\n</code></pre>"},{"location":"examples/display_notification/index.html","title":"Display a Notification","text":"WindowsUbuntu <pre><code>shell:\n\nbutton:\n  - platform: shell\n    name: 'Display Notification'\n    command: |-\n      $Program = \"UbiHome\"\n      $ToastTitle = \"Hello World!\"\n      $ToastText = \"This is a test.\"\n\n      [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] &gt; $null\n      $Template = [Windows.UI.Notifications.ToastNotificationManager]::GetTemplateContent([Windows.UI.Notifications.ToastTemplateType]::ToastText02)\n\n      $RawXml = [xml] $Template.GetXml()\n      ($RawXml.toast.visual.binding.text|where {$_.id -eq \"1\"}).AppendChild($RawXml.CreateTextNode($ToastTitle)) &gt; $null\n      ($RawXml.toast.visual.binding.text|where {$_.id -eq \"2\"}).AppendChild($RawXml.CreateTextNode($ToastText)) &gt; $null\n\n      $SerializedXml = New-Object Windows.Data.Xml.Dom.XmlDocument\n      $SerializedXml.LoadXml($RawXml.OuterXml)\n\n      $Toast = [Windows.UI.Notifications.ToastNotification]::new($SerializedXml)\n      $Toast.Tag = $Program\n      $Toast.Group = $Program\n      $Toast.ExpirationTime = [DateTimeOffset]::Now.AddMinutes(1)\n\n      $Notifier = [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier($Program)\n      $Notifier.Show($Toast);\n</code></pre> <p>Sample script from: https://den.dev/blog/powershell-windows-notification/</p> <pre><code>shell:\n\n# This is a pure sample (not tested yet!)\nbutton:\n  - platform: shell\n    name: 'Display Notification'\n    command: |-\n      zenity --notification --text \"Hello World from UbiHome!\"\n</code></pre> <p>Sample script from: https://superuser.com/questions/31917/is-there-a-way-to-show-notification-from-bash-script-in-ubuntu)</p>"},{"location":"examples/logging/index.html","title":"Logging","text":"<p>If you need more information from the program you can enable logging.  This is done by adding the <code>logger</code> section to your configuration file:</p> <pre><code>logger:\n  level: INFO\n</code></pre> <p>To switch log levels per component use the <code>logs</code> section. For example to enable <code>debug</code> logging for only the <code>ubihome_api</code> component, you would add the following to your configuration file:</p> <pre><code>logger:\n  level: INFO\n  logs:\n    ubihome_api: debug\n</code></pre> <p>You can also set the log directory to a custom location. The default logging locations are document on the logger documentation page.</p> <pre><code>logger:\n  level: INFO\n  directory: ./logs\n</code></pre>"},{"location":"examples/motion_detection/index.html","title":"Motion Detection","text":"<p>Detect motion using a simple PIR Sensor. </p> <pre><code>ubihome:\n  name: UbiHome Example\n\ngpio:\n  device: raspberryPi\n\nbinary_sensor:\n  - platform: gpio\n    name: \"motion\"\n    icon: \"mdi:motion-sensor\"\n    device_class: presence\n    pin: 23\n    pull_up: true\n    update_interval: \"0s\"\n    filters:\n     - delayed_off: 10s\n</code></pre> <p>You can combine this with the screen on/off example to turn the screen on when motion is detected and off after a timeout. Look at the automat screen control on how to set it up.</p>"},{"location":"examples/open_chrome_tab/index.html","title":"Open a new tab in chrome","text":"WindowsLinux <pre><code>shell:\n\nbutton:\n  - platform: shell\n    name: 'Open new Chrome Tab'\n    command: \"start chrome \\\"https://ubihome.github.io/\\\"\"\n</code></pre> <pre><code>shell:\n\nbutton:\n  - platform: shell\n    name: 'Open new Chrome Tab'\n    command: \"chrome \\\"https://ubihome.github.io/\\\"\"\n</code></pre>"},{"location":"examples/screen_on_off/index.html","title":"Turn Raspberry screen on or off","text":"<p>Control the screen power state of a Raspberry Pi using the <code>vcgencmd</code> command or <code>wlr-randr</code> for Wayland.</p> Raspberry Pi"},{"location":"examples/screen_on_off/index.html#wayland","title":"Wayland","text":"<p>Try it out before by running <code>wlr-randr --output HDMI-A-1 --off</code> to turn off the screen and <code>wlr-randr --output HDMI-A-1 --on</code> to turn it back on.</p> <pre><code>shell:\n\nswitch:\n  - platform: shell\n    name: \"Screen\"\n    id: screen\n    command_on: \"wlr-randr --output HDMI-A-1 --on\"\n    command_off: \"wlr-randr --output HDMI-A-1 --off\"\n    command_state: |-\n      if wlr-randr --output HDMI-A-1 | grep -q \"Enabled: yes\"; then\n          echo true\n      else\n          echo false\n      fi\n</code></pre>"},{"location":"examples/screen_on_off/index.html#x11","title":"X11","text":"<p>Try it out before by running <code>vcgencmd display_power 0</code> to turn off the screen and <code>vcgencmd display_power 1</code> to turn it back on.</p> <p>Be sure to have <code>dtoverlay=vc4-fkms-v3d</code> activated.</p> <pre><code>shell:\n\nswitch:\n  - platform: shell\n    name: \"Screen\"\n    id: screen\n    command_on: \"vcgencmd display_power 1\"\n    command_off: \"vcgencmd display_power 0\"\n    command_state: |-\n      if vcgencmd display_power | grep -q \"display_power=1\"; then\n          echo true\n      else\n          echo false\n      fi\n</code></pre>"},{"location":"examples/stop_reboot/index.html","title":"Stop or reboot your system","text":"<p>This example shows how to stop or reboot your system using UbiHome. This is useful if you want to stop or reboot your system based on a trigger in Home Assistant.</p> <pre><code>button:\n  - platform: power_utils\n    name: \"Reboot\"\n    action: reboot\n\n  - platform: power_utils\n    name: \"Shutdown\"\n    action: shutdown\n\n  - platform: power_utils\n    name: \"Hibernate\"\n    action: hibernate\n\n  - platform: power_utils\n    name: \"Logout\"\n    action: logout\n\n  - platform: power_utils\n    name: \"Sleep\"\n    action: sleep\n</code></pre> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/button/restart</li> <li>https://esphome.io/components/button/shutdown</li> </ul>"},{"location":"examples/system_ressources/index.html","title":"Monitor system resources","text":"WindowsLinux <pre><code>shell: \n  type: powershell\n\nsensor:\n  - platform: shell\n    name: \"RAM Usage\"\n    id: ram_usage\n    icon: mdi:memory\n    state_class: \"measurement\"\n    unit_of_measurement: \"%\"\n    update_interval: 30s\n    command: |-\n      Get-WmiObject Win32_OperatingSystem -Property * | % {([math]::Round(($_.FreePhysicalMemory)/$_.totalvisiblememorysize,2))}\n</code></pre> <pre><code>shell: \n\nsensor:\n  - platform: shell\n    name: \"RAM Usage\"\n    id: ram_usage\n    icon: mdi:memory\n    state_class: \"measurement\"\n    unit_of_measurement: \"%\"\n    update_interval: 30s\n    command: |-\n      free | grep Mem | awk '{print $3/$2 * 100.0}'\n</code></pre>"},{"location":"features/index.html","title":"Features","text":"<p>UbiHome is built in a modular way. The modules can be split into the following categories:</p> <ul> <li> <p> Connectivity</p> <p>Connect with Home Assistant via the native API, use MQTT or the the built-in web server (REST API).</p> <p> Getting started</p> </li> <li> <p> Platforms</p> <p>Use the built-in platforms to access and control a devices sensor, a program, GPIO or create your own. </p> <p> Getting started</p> </li> <li> <p> Sensors &amp; Actions</p> <p>Make the data or actions available in a structured way, as sensor, button or switch.</p> <p> Getting started</p> </li> <li> <p> Utilities</p> <p>Stuck at configuring something? Use the built-in utilities to help you out.</p> <p> Getting started</p> </li> </ul>"},{"location":"features/components/index.html","title":"Components","text":"<p>Components are the building blocks of the system. Many Platform features use the base configuration options of these.</p>"},{"location":"features/components/index.html#entities","title":"Entities","text":"<ul> <li> <p> Sensor</p> <p>Make data available as a sensor.</p> <p> View Documentation</p> </li> <li> <p> Button</p> <p>Trigger an action on the device.</p> <p> View Documentation</p> </li> <li> <p> Binary Sensor</p> <p>Track on/off states or occupancy.</p> <p> View Documentation</p> </li> <li> <p> Switch</p> <p>Switch something on or off.</p> <p> View Documentation</p> </li> </ul>"},{"location":"features/components/index.html#entity-attributes","title":"Entity Attributes","text":"<ul> <li> <p> Actions</p> <p>Trigger actions from state changes. Even works offline!</p> <p> View Documentation</p> </li> <li> <p> Filters</p> <p>Modify the data of an entity (e.g. round, delay).</p> <p> View Documentation</p> </li> </ul>"},{"location":"features/components/actions.html","title":"Triggers and Actions","text":"<p>Each entity can have different triggers.</p>"},{"location":"features/components/actions.html#list-of-actions","title":"List of Actions","text":"<ul> <li><code>switch.turn_on</code></li> <li><code>switch.turn_off</code></li> </ul>"},{"location":"features/components/binary_sensor.html","title":"Binary Sensor","text":"Base Example<pre><code>binary_sensor:\n - platform: ... #(1)!\n    name: \"My Binary Sensor\"\n</code></pre> <ol> <li>Here the plaform must be defined. </li> </ol> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/binary_sensor/</li> </ul>"},{"location":"features/components/button.html","title":"Button","text":"Base Example<pre><code>button: \n - platform: ... #(1)!\n   name: \"Write Hello World\"\n</code></pre> <ol> <li>Here the plaform must be defined. </li> </ol> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/button/</li> </ul>"},{"location":"features/components/filters.html","title":"Filters","text":"<p>On any entity you can add filters to modify the entity's data. </p> <pre><code>sensor:\n  - platform: shell\n    name: \"RAM Usage\"\n    command: echo 1.123345\n    filters:\n      - round: 2\n\n# Entity will be shown as 1.12\n</code></pre> <p>Filters are specific to the entity for now. Look at each entity for the available filters.</p>"},{"location":"features/components/sensor.html","title":"Sensor","text":"Base Example<pre><code>sensor:\n  - platform: ... #(1)!\n    name: \"My Sensor\"\n    id: ram_usage\n    icon: mdi:memory\n    # device_class: \"data_size\"\n    state_class: \"measurement\"\n    unit_of_measurement: \"%\"\n</code></pre> <ol> <li>Here the plaform must be defined. </li> </ol> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/sensor/</li> </ul>"},{"location":"features/components/switch.html","title":"Switch","text":"Base Example<pre><code>switch:\n  - platform: ... #(1)!\n    name: \"My Switch\"\n</code></pre> <ol> <li>Here the plaform must be defined. </li> </ol> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/switch/index.html</li> </ul>"},{"location":"features/connectivity/index.html","title":"Connectivity","text":"<ul> <li> <p> Native API</p> <p>Use ESPHome's native API to connect to your device</p> <p> See Documentation</p> </li> <li> <p> MQTT</p> <p>Connect to any MQTT broker</p> <p> See Documentation</p> </li> <li> <p> MDNS</p> <p>Advertise the device and its services via mDNS. </p> <p> See Documentation</p> </li> <li> <p> Web Server (REST API)</p> <p>Not yet implemented!</p> <p>Trigger an action via the web server and it's REST API.</p> <p> See Documentation</p> </li> <li> <p> HTTP</p> <p>Not yet implemented!</p> <p>Call any HTTP endpoint to trigger.</p> <p> See Documentation</p> </li> </ul>"},{"location":"features/connectivity/http.html","title":"HTTP","text":"<p>TBD</p> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/http_request</li> </ul>"},{"location":"features/connectivity/mdns.html","title":"MDNS","text":"<pre><code>mdns:\n</code></pre> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/mdns.html</li> </ul>"},{"location":"features/connectivity/mqtt.html","title":"MQTT","text":"<p>The MQTT client connects to your MQTT broker and allows you to receive sensor updates or send actions to your device.</p> <p>This is a simple configuration: </p> <pre><code>mqtt:\n  broker: &lt;your_broker&gt;\n  username: &lt;your_username&gt;\n  password: &lt;your_password&gt;\n</code></pre> <p>Here is a more complex example:</p> <pre><code>mqtt:\n  broker: &lt;your_broker&gt;\n  username: &lt;your_username&gt;\n  password: &lt;your_password&gt;\n  discovery: true\n  discovery_prefix: homeassistant\n  topic_prefix: ubihome\n</code></pre> <p>This will connect to your MQTT broker and send all sensor updates to the <code>ubihome/sensor/&lt;sensor_name&gt;</code> topic. It will also listen for actions on the <code>ubihome/action/&lt;action_name&gt;</code> topic.</p>"},{"location":"features/connectivity/mqtt.html#device-discovery","title":"Device Discovery","text":"<p>Device Discovery is enabled by default, so the device will automatically be discovered by Home Assistant. You can find the device in the MQTT integration in Home Assistant.</p> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/mqtt.html</li> </ul>"},{"location":"features/connectivity/native_api.html","title":"Native Api","text":"<p>This uses the same API as ESPHome.</p>"},{"location":"features/connectivity/native_api.html#basic-configuration","title":"Basic Configuration","text":"<pre><code># This make the native api available\napi:\n</code></pre> <pre><code>api:\n  # Optional: Default Port is 6053\n  port: 6053\n  password: \"your_password\" # Optional\n</code></pre> <p>Similar to ESPHome:</p> <ul> <li>ESPHome API</li> </ul>"},{"location":"features/connectivity/web_server.html","title":"Web Server","text":"<p>TBD</p> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/web_server</li> </ul>"},{"location":"features/platforms/index.html","title":"Platforms","text":"<ul> <li> <p> Shell</p> <p>Execute any command for retrieving data or on trigger.</p> <p> View Documentation</p> </li> <li> <p> More </p> <p>More to come...</p> </li> </ul>"},{"location":"features/platforms/bluetooth.html","title":"Bluetooth","text":"<p>Scans for Bluetooth devices and reports them to HomeAssistant via its native API.</p> <p>The Bluetooth Proxy only support proxying for now.</p> Base Configuration<pre><code>ubihome:\n  name: Test Bluetooth Proxy\n\napi:\n\nbluetooth_proxy:\n</code></pre> <p>TODOs:</p> <ul> <li> Allow pausing the bluetooth proxy (e.g. while media is played)</li> </ul> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/bluetooth_proxy.html</li> </ul>"},{"location":"features/platforms/bme280.html","title":"BME280","text":"<p>No platform configuration is needed. Just include the following:</p> <pre><code>sensor:\n  - platform: bme280\n    name: \"\"\n</code></pre>","tags":["Temperature","Humidity","Pressure","I2C"]},{"location":"features/platforms/gpio.html","title":"GPIO","text":"<pre><code>gpio:\n  device: raspberryPi\n\nbinary_sensor:\n  - platform: gpio\n    name: \"Motion\"\n    icon: \"mdi:motion-sensor\"\n    device_class: presence\n    pin: 23\n</code></pre>"},{"location":"features/platforms/power_utils.html","title":"Power Utilities","text":"<pre><code>power_utils:\n\nbutton:\n - platform: power_utils\n   name: \"Power Off\"\n   action: poweroff\n\n - platform: power_utils\n   name: \"Reboot\"\n   action: reboot\n\n - platform: power_utils\n   name: \"Logout\"\n   action: logout\n\n - platform: power_utils\n   name: \"Hibernate\"\n   action: hibernate\n\n - platform: power_utils\n   name: \"Sleep\"\n   action: sleep\n</code></pre> <p>Similar to ESPHome:</p> <ul> <li>https://esphome.io/components/button/restart.html</li> <li>https://esphome.io/components/button/shutdown</li> </ul>"},{"location":"features/platforms/shell.html","title":"Shell","text":"<p>Enable the platform:</p> <pre><code>shell:\n  type: powershell\n</code></pre>"},{"location":"features/platforms/shell.html#usage","title":"Usage","text":""},{"location":"features/platforms/shell.html#base-properties","title":"Base Properties","text":"Property Description update_interval How often to run the command. Default is 60s. <p>In the future an update interval of <code>0</code> will allow you to stream the output of long running commands (e.g. a json log line by line).</p>"},{"location":"features/platforms/shell.html#sensors","title":"Sensors","text":"<pre><code>sensor:\n  - platform: shell\n    name: 'RAM Usage'\n    update_interval: 30s\n    command: |-\n      free | grep Mem | awk '{print $3/$2 * 100.0}'\n</code></pre>"},{"location":"features/platforms/shell.html#switch","title":"Switch","text":"<pre><code>switch:\n  - platform: shell\n    name: 'Screen'\n    id: screen\n    command_on: 'wlr-randr --output HDMI-A-1 --on'\n    command_off: 'wlr-randr --output HDMI-A-1 --off'\n    command_state: |-\n      wlr-randr --output HDMI-A-1 | grep -q \"Enabled: yes\"; then\n          echo true\n      else\n          echo false\n      fi\n</code></pre>"},{"location":"features/utilities/index.html","title":"Utilities","text":"<p>Currently the following utilities are available:</p> <ul> <li>Logger</li> </ul>"},{"location":"features/utilities/logger.html","title":"Logger","text":"Example configuration entry<pre><code>logger:\n  level: INFO\n  directory: ./right-here\n  logs:\n    libmdns: DEBUG\n</code></pre> Log Level Description ERROR Only log very serious errors. WARNING Log warnings and errors. INFO Log informational messages, warnings and errors. DEBUG Log debug messages, informational messages, warnings and errors. TRACE Log all messages, including debug and trace messages. <p>From Rust LogLevels;</p>"},{"location":"features/utilities/logger.html#default-logging-directory","title":"Default Logging Directory","text":"OS Directory Example Path Linux <code>$XDG_DATA_HOME/ubihome/</code> or <code>$HOME/.local/share/ubihome/</code> <code>/home/alice/.local/share/ubihome/logs</code> Windows <code>{FOLDERID_LocalAppData}\\ubihome\\</code> <code>C:\\Users\\Alice\\AppData\\Local\\ubihome\\</code> MacOS <code>$HOME/Library/Application Support/ubihome/</code> <code>/Users/Alice/Library/Application Support/ubihome/</code> <p>From Rust Directories</p>"},{"location":"getting_started/index.html","title":"Getting Started","text":"<p>For now<sup>1</sup> a single executable is provided. You can download them from the GitHub Releases page or use the direct links below.</p> LinuxWindowsMacOS <ol> <li> <p>This will change in the future to allow for custom compilation for modular builds and custom extensions.\u00a0\u21a9</p> </li> </ol>"},{"location":"getting_started/index.html#download","title":"Download","text":"Devices Download Target Any Linux TAR Link x86_64-unknown-linux-musl Raspberry Pi 3 TAR Link armv7-unknown-linux-musleabi Raspberry Pi Zero 2 TAR Link arm-unknown-linux-musleabi"},{"location":"getting_started/index.html#installation","title":"Installation","text":"<ol> <li> <p>Download and extract the archive and place the ubihome executable in a directory of your choice.</p> <pre><code>curl -L -o ubihome.tar.gz https://github.com/UbiHome/UbiHome/releases/download/v0.8.11/ubihome-Linux-musleabi-armv7.tar.gz\ntar xvzf ./ubihome.tar.gz\n</code></pre> </li> <li> <p>Edit the configuration file <code>config.yaml</code> in the same directory as the executable. It could contain the following:</p> config.yaml<pre><code>ubihome:\n  name: New Awesome UbiHome Device\n\napi:\n\nshell:\n\nbutton:\n  - platform: shell\n    id: my_button\n    name: 'Write Hello World'\n    command: \"echo 'Hello World!' &gt;&gt; test.log\"\n\nsensor:\n  - platform: shell\n    name: \"RAM Usage\"\n    id: ram_usage\n    icon: mdi:memory\n    state_class: \"measurement\"\n    unit_of_measurement: \"%\"\n    update_interval: 30s\n    command: |-\n      free | grep Mem | awk '{print $3/$2 * 100.0}'\n</code></pre> </li> <li> <p>Try it out:</p> <pre><code>./ubihome run\nUbiHome - 0.8.11\nLogDirectory: /home/codespace/.local/share\nConfig file path: /workspaces/ubihome/config.yaml\nBinary Sensor 'bluetooth_connected' output: false\nSensor 'ram_usage' output: 38.3144\nButton 'my_button' pressed.\nCommand executed successfully with no output.\n# End the process with ctrl+c\n</code></pre> </li> <li> <p>You should be able to see your device in Home Assistant now.</p> </li> <li> <p>To persistently run the executable install it as a service:</p> <pre><code>sudo ./ubihome install\n# The CLI will ask you where to install it. (You can just hit enter to install it in the default location)\n? Where do you want to install UbiHome? (/usr/bin/ubihome)\n</code></pre> <p>If you do this more often you can add the --install-path flag to the command to specify the path for the installation. Instead of the CLI asking for it.</p> </li> </ol>"},{"location":"getting_started/index.html#uninstallation","title":"Uninstallation","text":"<p>If you want to uninstall UbiHome you can run the following command:</p> <pre><code>./ubihome uninstall\n</code></pre>"},{"location":"getting_started/index.html#download_1","title":"Download","text":"Device Download Target Windows 11 ZIP Link x86_64-pc-windows-msvc"},{"location":"getting_started/index.html#installation_1","title":"Installation","text":"<ol> <li>Download and extract the archive and place the ubihome executable in a directory of your choice.</li> </ol> <pre><code>Invoke-WebRequest -OutFile ubihome.zip -Uri https://github.com/UbiHome/UbiHome/releases/download/v0.8.11/ubihome-Windows-msvc-x86_64.zip\nExpand-Archive -Force ubihome.zip ./\n</code></pre> <ol> <li>Edit the configuration file <code>config.yaml</code> in the same directory as the executable. It could contain the following:</li> </ol> config.yaml<pre><code>ubihome:\n  name: New Awesome UbiHome Device\n\napi:\n\nshell:\n\nbutton:\n  - platform: shell\n    id: my_button\n    name: 'Write Hello World'\n    command: \"echo 'Hello World!' &gt;&gt; test.log\"\n\nsensor:\n  - platform: shell\n    name: 'RAM Usage'\n    id: ram_usage\n    icon: mdi:memory\n    state_class: 'measurement'\n    unit_of_measurement: '%'\n    update_interval: 30s\n    command: |-\n      Get-WmiObject Win32_OperatingSystem -Property * | % {([math]::Round(($_.FreePhysicalMemory)/$_.totalvisiblememorysize,2))}\n</code></pre> <ol> <li> <p>Try it out:</p> <pre><code>./ubihome.exe run\nUbiHome - 0.8.11\nLogDirectory: /home/codespace/.local/share\nConfig file path: /workspaces/UbiHome/config.yaml\nBinary Sensor 'bluetooth_connected' output: false\nSensor 'ram_usage' output: 38.3144\nButton 'my_button' pressed.\nCommand executed successfully with no output.\n# End the process with ctrl+c\n</code></pre> </li> <li> <p>You should be able to see your device in Home Assistant now.</p> </li> <li> <p>To persistently run the executable install it as a service:</p> <p>Press Win+X+A for the admin shell.</p> <pre><code>./ubihome.exe install\n# The CLI will ask you where to install it. (You can just hit enter to install it in the default location)\n? Where do you want to install UbiHome? (C:\\Program Files\\ubihome)\n</code></pre> <p>If you do this more often you can add the --install-path flag to the command to specify the path for the installation. Instead of the CLI asking for it.</p> </li> </ol>"},{"location":"getting_started/index.html#uninstallation_1","title":"Uninstallation","text":"<p>If you want to uninstall UbiHome you can run the following command:</p> <pre><code>./ubihome.exe uninstall\n</code></pre>"},{"location":"getting_started/index.html#download_2","title":"Download","text":"Device Download Target MacOS TAR Link x86_64-apple-darwin"},{"location":"getting_started/index.html#installation_2","title":"Installation","text":"<p>Not yet tested. But you can try it out and create an issue if it doesn't work.</p> <ol> <li> <p>Download and extract the archive and place the ubihome executable in a directory of your choice.</p> <pre><code>curl -L -o ubihome.tar.gz https://github.com/UbiHome/UbiHome/releases/download/v0.8.11/ubihome-Linux-musleabi-armv7.tar.gz\ntar xvzf ./ubihome.tar.gz\n</code></pre> </li> <li> <p>Edit the configuration file <code>config.yaml</code> in the same directory as the executable. It could contain the following:</p> config.yaml<pre><code>ubihome:\n  name: New Awesome UbiHome Device\n\napi:\n\nshell:\n\nbutton:\n  - platform: shell\n    id: my_button\n    name: 'Write Hello World'\n    command: \"echo 'Hello World!' &gt;&gt; test.log\"\n\nsensor:\n  - platform: shell\n    name: \"RAM Usage\"\n    id: ram_usage\n    icon: mdi:memory\n    state_class: \"measurement\"\n    unit_of_measurement: \"%\"\n    update_interval: 30s\n    command: |-\n      free | grep Mem | awk '{print $3/$2 * 100.0}'\n</code></pre> </li> <li> <p>Try it out:</p> <pre><code>./ubihome run\nUbiHome - 0.8.11\nLogDirectory: /home/codespace/.local/share\nConfig file path: /workspaces/ubihome/config.yaml\nBinary Sensor 'bluetooth_connected' output: false\nSensor 'ram_usage' output: 38.3144\nButton 'my_button' pressed.\nCommand executed successfully with no output.\n# End the process with ctrl+c\n</code></pre> </li> <li> <p>You should be able to see your device in Home Assistant now.</p> </li> <li> <p>To persistently run the executable install it as a service:</p> <pre><code>sudo ./ubihome install\n# The CLI will ask you where to install it. (You can just hit enter to install it in the default location)\n? Where do you want to install UbiHome? (/usr/bin/ubihome)\n</code></pre> <p>If you do this more often you can add the --install-path flag to the command to specify the path for the installation. Instead of the CLI asking for it.</p> </li> </ol>"},{"location":"getting_started/index.html#uninstallation_2","title":"Uninstallation","text":"<p>If you want to uninstall UbiHome you can run the following command:</p> <pre><code>./ubihome uninstall\n</code></pre>"}]}